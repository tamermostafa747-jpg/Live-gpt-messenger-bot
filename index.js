// npm i express body-parser axios fuse.js dotenv
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const Fuse = require('fuse.js');
const customReplies = require('./customReplies');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// === CONFIG ===
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
const GPT_MODEL = process.env.GPT_MODEL || 'gpt-4o'; // switch to 'gpt-5' when available

// === HEALTH CHECK ===
app.get('/', (_req, res) => res.status(200).send('SmartKidz bot up ‚úÖ'));
app.get('/health', (_req, res) => res.status(200).json({ ok: true }));

// === VERIFY WEBHOOK ===
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token && mode === 'subscribe' && token === VERIFY_TOKEN) {
    console.log('‚úÖ Webhook verified');
    return res.status(200).send(challenge);
  }
  return res.sendStatus(403);
});

// --- Arabic normalization (remove diacritics, unify letters) ---
function normalizeAr(str = '') {
  return String(str)
    .toLowerCase()
    .replace(/[ŸéŸãŸèŸåŸêŸçŸëŸíŸÄ]/g, '')
    .replace(/[ÿ•ÿ£ÿ¢ÿß]/g, 'ÿß')
    .replace(/Ÿâ/g, 'Ÿä')
    .replace(/ÿ§/g, 'Ÿà')
    .replace(/ÿ¶/g, 'Ÿä')
    .replace(/ÿ©/g, 'Ÿá')
    .trim();
}

// === Build fuzzy index over intents ===
const fuse = new Fuse(
  customReplies.map(it => ({
    ...it,
    _normTrigger: normalizeAr(it.trigger || ''),
    _normKeywords: (it.keywords || []).map(normalizeAr),
    _normExamples: (it.examples || []).map(normalizeAr)
  })),
  {
    includeScore: true,
    threshold: 0.36,
    keys: [
      '_normTrigger',
      '_normKeywords',
      '_normExamples',
      'reply.title',
      'reply.description'
    ]
  }
);

// === HANDLE INCOMING MESSAGES ===
app.post('/webhook', async (req, res) => {
  try {
    if (req.body.object !== 'page') return res.sendStatus(404);

    for (const entry of req.body.entry) {
      for (const event of entry.messaging) {
        const text = event?.message?.text;
        if (!text) continue;

        const senderId = event.sender.id;
        const userMessage = text.trim();
        if (!userMessage) continue;

        const finalReply = await getSmartReply(userMessage);

        await sendTypingOn(senderId);
        await delay(900);
        await sendReply(senderId, finalReply);
      }
    }
    return res.sendStatus(200);
  } catch (e) {
    console.error('‚ùå Webhook error:', e);
    return res.sendStatus(500);
  }
});

// === SMART REPLY (custom ‚Üí GPT rewrite | fallback ‚Üí GPT) ===
async function getSmartReply(userMessage) {
  try {
    const norm = normalizeAr(userMessage);
    const results = fuse.search(norm);
    const top = results[0];
    const confident = top && top.score !== undefined && top.score <= 0.36;

    const persona = `
ÿ£ŸÜÿ™ ÿ∑ÿ®Ÿäÿ® ÿ£ÿ∑ŸÅÿßŸÑ ŸàÿÆÿ®Ÿäÿ± ÿπŸÜÿßŸäÿ© ÿ®ÿ¥ÿπÿ± Ÿàÿ®ÿ¥ÿ±ÿ© ÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ ŸÅŸä ÿ¥ÿ±ŸÉÿ© SmartKidz.
ÿ™ÿ™ŸÉŸÑŸÖ ÿ®ŸÑÿ∫ÿ© ŸÖÿµÿ±Ÿäÿ© ŸÖŸáÿ∞ÿ®ÿ© ŸàÿØÿßŸÅÿ¶ÿ©. ŸáÿØŸÅŸÉ ÿ™Ÿàÿ¨ŸäŸá ÿßŸÑÿ£ŸáŸÑ ŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑÿ£ŸÜÿ≥ÿ®
Ÿàÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑŸÅŸàÿßÿ¶ÿØ ÿßŸÑÿµÿ≠Ÿäÿ© ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÖŸäŸÜ ÿ®ÿØŸàŸÜ ŸÖÿ®ÿßŸÑÿ∫ÿ© ÿ£Ÿà ŸàÿπŸàÿØ ÿπŸÑÿßÿ¨Ÿäÿ© ŸÇÿ∑ÿπŸäÿ©.
ŸÜŸàŸëŸá ÿ£ŸÜ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÇÿØ ÿ™ÿÆÿ™ŸÑŸÅ ŸÖŸÜ ÿ∑ŸÅŸÑ ŸÑÿ¢ÿÆÿ±.
`;

    let systemPrompt;
    let userPrompt;

    if (confident) {
      const intent = top.item;
      systemPrompt = persona + `
Ÿáÿ∞Ÿá ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿØÿßÿÆŸÑŸäÿ© ÿπŸÜ ŸÖŸÜÿ™ÿ¨/ÿπÿ±ÿ∂ SmartKidz:
${JSON.stringify(intent.reply, null, 2)}

ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™:
- ÿ£ÿπÿØ ÿßŸÑÿµŸäÿßÿ∫ÿ© ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿ•ŸÜÿ≥ÿßŸÜŸä ŸÖÿ≠ÿ™ÿ±ŸÅ Ÿäÿ¥ÿ®Ÿá ŸÜÿµŸäÿ≠ÿ© ÿ∑ÿ®Ÿäÿ®.
- ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑŸÅŸàÿßÿ¶ÿØ ÿßŸÑÿπŸÖŸÑŸäÿ© Ÿàÿ™ÿ£ÿ´Ÿäÿ±Ÿáÿß ÿπŸÑŸâ ÿµÿ≠ÿ© ÿßŸÑÿ¥ÿπÿ±/ÿßŸÑÿ®ÿ¥ÿ±ÿ©.
- ŸÑÿß ÿ™ÿ∞ŸÉÿ± ŸÉŸÑ ÿ¥Ÿäÿ° ÿ≠ÿ±ŸÅŸäŸãÿßÿõ ŸÑÿÆŸëÿµ ÿ®ÿ∞ŸÉÿßÿ° Ÿàÿ®ŸÜÿ®ÿ±ÿ© ŸÖÿ∑ŸÖÿ¶ŸÜÿ©.
- ÿßÿÆÿ™ŸÖ ÿ®ÿØÿπŸàÿ© ŸÑÿ∑ŸäŸÅÿ© (ÿ≥ÿ§ÿßŸÑ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä ÿ£Ÿà ÿßŸÇÿ™ÿ±ÿßÿ≠ ÿ™ÿ¨ÿ±ÿ®ÿ©/ÿ¥ÿ±ÿßÿ°).
- ŸÑÿß ÿ™ŸÇÿØŸëŸÖ ÿßÿØÿπÿßÿ°ÿßÿ™ ÿ∑ÿ®Ÿäÿ© ÿ£Ÿà ŸàÿπŸàÿØ ŸÜŸáÿßÿ¶Ÿäÿ©.
`;
      userPrompt = userMessage;
    } else {
      systemPrompt = persona + `
ÿßŸÑÿ≥ÿ§ÿßŸÑ ŸÇÿØ ŸäŸÉŸàŸÜ ÿπÿßŸÖŸãÿß. ŸÇÿØŸëŸÖ ÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÖŸÑŸäÿ© ŸÖŸàÿ¨ÿ≤ÿ©ÿå ÿ´ŸÖ ÿ±ÿ¥Ÿëÿ≠ ŸÖŸÜÿ™ÿ¨Ÿãÿß Ÿàÿßÿ≠ÿØŸãÿß ŸÖŸÜÿ∑ŸÇŸäŸãÿß ŸÖŸÜ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©.
ŸÑÿß ÿ™ÿ∑ŸÑŸÇ ŸàÿπŸàÿØŸãÿß ÿπŸÑÿßÿ¨Ÿäÿ©. ÿßÿ±ÿ®ÿ∑ ÿßŸÑÿ±ÿØ ÿ®ÿßŸÑŸÅÿßÿ¶ÿØÿ© ÿßŸÑÿµÿ≠Ÿäÿ© ŸÑŸÑÿ£ÿ∑ŸÅÿßŸÑ.
ŸÇÿßÿ¶ŸÖÿ© ŸÖÿÆÿ™ÿµÿ±ÿ© ŸÑŸÑÿ±ÿ¨Ÿàÿπ:
${JSON.stringify(
  customReplies.map(({ trigger, reply }) => ({
    trigger,
    title: reply?.title,
    highlights: reply?.highlights
  })),
  null,
  2
)}
`;
      userPrompt = userMessage;
    }

    const gpt = await axios.post(
      OPENAI_API_URL,
      {
        model: GPT_MODEL,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.65
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`
        }
      }
    );

    // Build a unified reply payload we can send (text + images)
    const textFromGpt = (gpt.data.choices?.[0]?.message?.content || '').trim();

    // If we matched a custom intent, include its media (image + gallery) after the text
    let images = [];
    if (confident) {
      const r = top.item.reply || {};
      if (r.image) images.push(r.image);
      if (Array.isArray(r.gallery)) images = images.concat(r.gallery.filter(Boolean));
    }

    return formatReply(textFromGpt, images);
  } catch (e) {
    console.error('‚ùå OpenAI error:', e?.response?.data || e.message);
    return formatReply('ÿπÿ∞ÿ±Ÿãÿßÿå ÿ≠ÿµŸÑÿ™ ŸÖÿ¥ŸÉŸÑÿ© ŸÖÿ§ŸÇÿ™ÿ©‚ÄîŸÖŸÖŸÉŸÜ ŸÜÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸäÿü');
  }
}

// === Helper: combine text + image URLs into one message string ===
function formatReply(text = '', imageUrls = []) {
  const safeText = (text || '').trim();
  const mediaLines = (imageUrls || []).map(u => String(u).trim()).filter(Boolean);
  return [safeText, ...mediaLines].filter(Boolean).join('\n');
}

// === SEND TYPING ===
async function sendTypingOn(recipientId) {
  try {
    await axios.post(
      `https://graph.facebook.com/v17.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
      { recipient: { id: recipientId }, sender_action: 'typing_on' }
    );
  } catch (e) {
    console.error('Typing error:', e.message);
  }
}

// === SEND MESSAGE (supports images & multi-line) ===
async function sendReply(recipientId, replyContent) {
  try {
    const parts = String(replyContent).split('\n').filter(p => p.trim());
    for (const part of parts) {
      const isUrl = /^https?:\/\/\S+$/i.test(part.trim());
      if (isUrl) {
        await axios.post(
          `https://graph.facebook.com/v17.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
          {
            recipient: { id: recipientId },
            message: {
              attachment: { type: 'image', payload: { url: part.trim(), is_reusable: true } }
            }
          }
        );
      } else {
        // Messenger hard limit is ~2000 chars; chunk just in case
        for (const chunk of chunkText(part, 1800)) {
          await axios.post(
            `https://graph.facebook.com/v17.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
            { recipient: { id: recipientId }, message: { text: chunk } }
          );
        }
      }
      await delay(250);
    }
  } catch (e) {
    console.error('Send error:', e?.response?.data || e.message);
  }
}

// === Utils ===
function delay(ms) { return new Promise(r => setTimeout(r, ms)); }
function chunkText(str, max = 1800) {
  const s = String(str);
  if (s.length <= max) return [s];
  const out = [];
  let i = 0;
  while (i < s.length) {
    out.push(s.slice(i, i + max));
    i += max;
  }
  return out;
}

// === START ===
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
